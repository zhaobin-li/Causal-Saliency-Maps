d$predicted <- predict (fm1, newdata=d, allow.new.levels=T)
d$simulated <- simulate(fm1, seed=1, newdata=d[-1], re.form=NA,
allow.new.levels=T)$sim_1
d$predicted <- predict (fm1, newdata=d, allow.new.levels=T)
d$simulated <- simulate(fm1, seed=1, newdata=d, re.form=NA,
allow.new.levels=T)$sim_1
d$predicted <- predict (fm1, newdata=d, allow.new.levels=F)
d$simulated <- simulate(fm1, seed=1, newdata=d, re.form=NA,
allow.new.levels=F)$sim_1
coef(fm1)
fixef(fm1)
ranef(fm1)
simulate(fm1, seed=1, newdata=d, re.form=NA,
allow.new.levels=F)
simulate(fm1, seed=1, newdata=d, re.form=NA,
allow.new.levels=T)
simulate(fm1, seed=1, newdata=d, re.form=NA,
allow.new.levels=T, newparams=fixef(fm1))
mkDataTemplate
mkDataTemplate(fm1)
simulate(fm1, seed=1, newdata=d, re.form=NA,
allow.new.levels=T, newparams=list(beta=fixef(fm1)))
sigma = sigma(fm1)
sigma(fm1)
theta(fm1)
getME(object, "theta")
getME(fm1, "theta")
getME(object, "theta", "beta")
getME(fm1, "theta", "beta")
getME(fm1, "theta")
getME(fm1, c("theta", "beta")
getME(fm1, c("theta", "beta"))
getME(fm1, c("theta", "beta", "sigma"))
simulate(fm1, seed=1, newdata=d, re.form=NA,
allow.new.levels=T, newparams=getME(fm1, c("theta", "beta", "sigma")))
simulate(fm1, seed=1, newdata=d, re.form=NA,
allow.new.levels=T, newparams=getME(fm1, "ALL")))
simulate(fm1, seed=1, newdata=d, re.form=NA,
allow.new.levels=T, newparams=getME(fm1, "ALL"))
f <- function(x, ...) {
plot(x, xlab="Subject", ylim=c(0, 500), ...)
grid()
}
par(mfrow=c(1,3), mar=c(4,4,1,1))
with(d, f(tapply(Reaction,  Subject, mean), main="Original data", ylab="Reaction", xlim=c(1, 36)))
with(d, f(tapply(predicted, Subject, mean), main="Predicted data", ylab="", col=rep(1:2, each=18)))
with(d, f(tapply(simulated, Subject, mean), main="Simulated data", ylab="", col=rep(1:2, each=18)))
legend("bottomright", pch=c(1,1), col=1:2, c("old subjects", "new subjects"), bg="white")
x <- with(d, as.matrix(tapply(Reaction,  list(Subject, Days), mean), ncol=9))
y <- with(d, as.matrix(tapply(predicted, list(Subject, Days), mean), ncol=9))
z <- with(d, as.matrix(tapply(simulated, list(Subject, Days), mean), ncol=9))
f <- function(xlab="Day", ...) {
plot(c(1, 10), c(0, 500), ylab="Raction", xlab=xlab, t="n", ...)
grid()
}
par(mfrow=c(2,3), mar=c(4,4,1,1))
f(main="Original data", "")
for (i in 1:18)
lines(x[i,])
f(main="Predicted data, old subjects", "")
for (i in 1:18)
lines(y[i,])
f(main="Predicted data, new subjects", "")
for (i in 19:36)
lines(y[i,], col="red")
f(main="Original data")
for (i in 1:18)
lines(x[i,])
f(main="Simulated data, old subjects")
for (i in 1:18)
lines(z[i,])
f(main="Simulated data, new subjects")
for (i in 19:36)
lines(z[i,], col="red")
legend("bottomright", lty=c(1,1), col=1:2, c("old subjects", "new subjects"), bg="white")
d <- sleepstudy
library(lme4)
d <- sleepstudy
d$Subject <- factor(rep(1:18, each=10))
fm1 <- lmer(Reaction ~ Days + (Days|Subject), d)
summary(fm1)
d <- rbind(sleepstudy, sleepstudy)
d$Subject <- factor(rep(1:36, each=10))
d$Reaction <- ifelse(d$Subject %in% 19:36, NA, d$Reaction)
d$predicted <- predict (fm1, newdata=d, allow.new.levels=T)
d$simulated <- simulate(fm1, seed=1, newdata=d[-1], re.form=NA,
allow.new.levels=T)$sim_1
f <- function(x, ...) {
plot(x, xlab="Subject", ylim=c(0, 500), ...)
grid()
}
par(mfrow=c(1,3), mar=c(4,4,1,1))
with(d, f(tapply(Reaction,  Subject, mean), main="Original data", ylab="Reaction", xlim=c(1, 36)))
with(d, f(tapply(predicted, Subject, mean), main="Predicted data", ylab="", col=rep(1:2, each=18)))
with(d, f(tapply(simulated, Subject, mean), main="Simulated data", ylab="", col=rep(1:2, each=18)))
legend("bottomright", pch=c(1,1), col=1:2, c("old subjects", "new subjects"), bg="white")
f <- function(xlab="Day", ...) {
plot(c(1, 10), c(0, 500), ylab="Raction", xlab=xlab, t="n", ...)
grid()
}
par(mfrow=c(2,3), mar=c(4,4,1,1))
f(main="Original data", "")
for (i in 1:18)
lines(x[i,])
f(main="Predicted data, old subjects", "")
for (i in 1:18)
lines(y[i,])
f(main="Predicted data, new subjects", "")
for (i in 19:36)
lines(y[i,], col="red")
f(main="Original data")
for (i in 1:18)
lines(x[i,])
f(main="Simulated data, old subjects")
for (i in 1:18)
lines(z[i,])
f(main="Simulated data, new subjects")
for (i in 19:36)
lines(z[i,], col="red")
legend("bottomright", lty=c(1,1), col=1:2, c("old subjects", "new subjects"), bg="white")
params <- getME(fm1, "beta", "theta", "sigma")
d$simulated <- simulate(fm1, seed=1, newdata=d[-1], re.form=NA,
allow.new.levels=T, newparams=params)$sim_1
params <- getME(fm1, c("beta", "theta", "sigma"))
params <- getME(fm1, c("beta", "theta", "sigma"))
d$simulated <- simulate(fm1, seed=1, newdata=d[-1], re.form=NA,
allow.new.levels=T, newparams=params)$sim_1
View(params)
params <- getME(fm1, c("fixef", "theta", "sigma"))
d$simulated <- simulate(fm1, seed=1, newdata=d[-1], re.form=NA,
allow.new.levels=T, newparams=params)$sim_1
params <- getME(fm1, c("beta", "theta", "sigma"))
d$simulated <- simulate(fm1, seed=1, newdata=d[-1], re.form=NA,
allow.new.levels=T, newparams=params)$sim_1
View(fm1)
params$beta[[1]]
params$beta[1]
params$beta[1] <- -params$beta[1]
View(params)
d$simulated <- simulate(fm1, seed=1, newdata=d[-1], re.form=NA,
allow.new.levels=T, newparams=params)$sim_1
f <- function(x, ...) {
plot(x, xlab="Subject", ylim=c(0, 500), ...)
grid()
}
par(mfrow=c(1,3), mar=c(4,4,1,1))
with(d, f(tapply(Reaction,  Subject, mean), main="Original data", ylab="Reaction", xlim=c(1, 36)))
with(d, f(tapply(predicted, Subject, mean), main="Predicted data", ylab="", col=rep(1:2, each=18)))
with(d, f(tapply(simulated, Subject, mean), main="Simulated data", ylab="", col=rep(1:2, each=18)))
legend("bottomright", pch=c(1,1), col=1:2, c("old subjects", "new subjects"), bg="white")
x <- with(d, as.matrix(tapply(Reaction,  list(Subject, Days), mean), ncol=9))
y <- with(d, as.matrix(tapply(predicted, list(Subject, Days), mean), ncol=9))
z <- with(d, as.matrix(tapply(simulated, list(Subject, Days), mean), ncol=9))
f <- function(xlab="Day", ...) {
plot(c(1, 10), c(0, 500), ylab="Raction", xlab=xlab, t="n", ...)
grid()
}
par(mfrow=c(2,3), mar=c(4,4,1,1))
f(main="Original data", "")
for (i in 1:18)
lines(x[i,])
f(main="Predicted data, old subjects", "")
for (i in 1:18)
lines(y[i,])
f(main="Predicted data, new subjects", "")
for (i in 19:36)
lines(y[i,], col="red")
f(main="Original data")
for (i in 1:18)
lines(x[i,])
f(main="Simulated data, old subjects")
for (i in 1:18)
lines(z[i,])
f(main="Simulated data, new subjects")
for (i in 19:36)
lines(z[i,], col="red")
legend("bottomright", lty=c(1,1), col=1:2, c("old subjects", "new subjects"), bg="white")
# install mixedpower
if (!require("devtools")) {
install.packages("devtools", dependencies = TRUE)}
devtools::install_github("DejanDraschkow/mixedpower") # mixedpower is hosted on GitHub
library(jsonlite)
library(tidyverse)
library(ggplot2)
library(lme4)
library(afex)
# Wrangle ------------------------------------------------------------
# column names in https://psiturk.readthedocs.io/en/stable/command_line.html?highlight=trialdata.csv#download-datafiles
df <-
read_csv("trialdata_random.csv",
col_names = c("id", "trialNum", "time", "trialData")
) |>
arrange(time) |> # arrange by time
glimpse()
# get nested JSON trial data
df <-
df |>
rowwise() |>
mutate(trialData = fromJSON(trialData)) |>
unnest(trialData) |>
glimpse()
# restrict to main trials
df <- df |>
filter(trial == "results") |>
glimpse()
# Visualize ---------------------------------------------------------------
df <-
df |>
select(id, imgNum, responseCompare, robotCompare, labelCompare) |>
glimpse()
# same == 0, opposite == 1
df <- df |>
mutate(
choice = ifelse(responseCompare == "same", 0, 1),
label = ifelse(labelCompare == "same", 0, 1),
robot = relevel(factor(robotCompare), ref = "sameRobot")
) |>
glimpse()
df |>
group_by(robotCompare, labelCompare, responseCompare) |>
tally()
df |>
group_by(id, robot, label, choice) |>
tally() |>
ggplot(aes(factor(choice), n)) +
geom_boxplot() +
geom_jitter() +
facet_grid(cols = vars(robot, label), labeller = label_context)
# Analyze ----------------------------------------------------------------
model.glm <- glm(choice ~ robot * label,
data = df,
family = binomial(link = "logit")
)
summary(model.glm)
# singular error since all participants and images are i.i.d
model.glmer <-
glmer(choice ~ label * robot + (1 | id) + (1 | imgNum),
data = df,
family = binomial
)
summary(model.glmer)
# Simulate H1 Label Only -------------------------------------------------------------
choiceEqualLabelPr <- 3 / 4
df <- df |>
rowwise() |>
mutate(choiceH1LabelOnly = sample(
c(label, 1 - label),
1,
prob = c(
choiceEqualLabelPr,
1 - choiceEqualLabelPr
)
)) |>
ungroup()
df |>
summarize(mean(choiceH1LabelOnly == label))
df |>
group_by(id, robot, label, choiceH1LabelOnly) |>
tally() |>
ggplot(aes(factor(choiceH1LabelOnly), n)) +
geom_point() +
geom_boxplot() +
facet_grid(cols = vars(robot, label), labeller = label_context)
model.H1Label.glm <- glm(choiceH1LabelOnly ~ robot * label,
data = df,
family = binomial(link = "logit")
)
summary(model.H1Label.glm)
model.H1Label.glmer <-
glmer(choiceH1LabelOnly ~ label * robot + (1 | id),
data = df,
family = binomial()
)
summary(model.H1Label.glmer)
model.H1Label.glmer <-
glmer(choiceH1LabelOnly ~ label + (1 | id),
data = df,
family = binomial()
)
summary(model.H1Label.glmer)
library(simr)
library(mixedpower)
power_FLP <- mixedpower(model = model.H1Label.glmer, data = df,
fixed_effects = c("label"),
simvar = "id", steps = c(20,30,40,50,60),
critical_value = 2, n_sim = 1000)
power_FLP <- mixedpower(model = model.H1Label.glmer)
fixef(model.H1Label.glmer)
df
library(jsonlite)
library(tidyverse)
library(ggplot2)
library(lme4)
library(afex)
# Wrangle ------------------------------------------------------------
# column names in https://psiturk.readthedocs.io/en/stable/command_line.html?highlight=trialdata.csv#download-datafiles
df <-
read_csv("trialdata_random.csv",
col_names = c("id", "trialNum", "time", "trialData")
) |>
arrange(time) |> # arrange by time
glimpse()
# get nested JSON trial data
df <-
df |>
rowwise() |>
mutate(trialData = fromJSON(trialData)) |>
unnest(trialData) |>
glimpse()
# restrict to main trials
df <- df |>
filter(trial == "results") |>
glimpse()
df <- df |>
group_by(id) |>
mutate(id = cur_group_id()) |>
glimpse()
library(jsonlite)
library(tidyverse)
library(ggplot2)
library(lme4)
library(afex)
# Wrangle ------------------------------------------------------------
# column names in https://psiturk.readthedocs.io/en/stable/command_line.html?highlight=trialdata.csv#download-datafiles
df <-
read_csv("trialdata_random.csv",
col_names = c("id", "trialNum", "time", "trialData")
) |>
arrange(time) |> # arrange by time
glimpse()
# get nested JSON trial data
df <-
df |>
rowwise() |>
mutate(trialData = fromJSON(trialData)) |>
unnest(trialData) |>
glimpse()
# restrict to main trials
df <- df |>
filter(trial == "results") |>
glimpse()
df <- df |>
group_by(id) |>
mutate(id = cur_group_id()) |>
glimpse()
# Visualize ---------------------------------------------------------------
df <-
df |>
select(id, imgNum, responseCompare, robotCompare, labelCompare) |>
glimpse()
# same == 0, opposite == 1
df <- df |>
mutate(
choice = ifelse(responseCompare == "same", 0, 1),
label = ifelse(labelCompare == "same", 0, 1),
robot = relevel(factor(robotCompare), ref = "sameRobot")
) |>
glimpse()
df |>
group_by(robotCompare, labelCompare, responseCompare) |>
tally()
df |>
group_by(id, robot, label, choice) |>
tally() |>
ggplot(aes(factor(choice), n)) +
geom_boxplot() +
geom_jitter() +
facet_grid(cols = vars(robot, label), labeller = label_context)
# Analyze ----------------------------------------------------------------
model.glm <- glm(choice ~ robot * label,
data = df,
family = binomial(link = "logit")
)
summary(model.glm)
# singular error since all participants and images are i.i.d
model.glmer <-
glmer(choice ~ label * robot + (1 | id) + (1 | imgNum),
data = df,
family = binomial
)
summary(model.glmer)
# Simulate H1 Label Only -------------------------------------------------------------
choiceEqualLabelPr <- 3 / 4
df <- df |>
rowwise() |>
mutate(choiceH1LabelOnly = sample(
c(label, 1 - label),
1,
prob = c(
choiceEqualLabelPr,
1 - choiceEqualLabelPr
)
)) |>
ungroup()
df |>
summarize(mean(choiceH1LabelOnly == label))
df |>
group_by(id, robot, label, choiceH1LabelOnly) |>
tally() |>
ggplot(aes(factor(choiceH1LabelOnly), n)) +
geom_point() +
geom_boxplot() +
facet_grid(cols = vars(robot, label), labeller = label_context)
model.H1Label.glm <- glm(choiceH1LabelOnly ~ robot * label,
data = df,
family = binomial(link = "logit")
)
summary(model.H1Label.glm)
model.H1Label.glmer <-
glmer(choiceH1LabelOnly ~ label * robot + (1 | id),
data = df,
family = binomial()
)
summary(model.H1Label.glmer)
model.H1Label.glmer <-
glmer(choiceH1LabelOnly ~ label + (1 | id),
data = df,
family = binomial()
)
summary(model.H1Label.glmer)
library(simr)
library(mixedpower)
fixef(model.H1Label.glmer)
power_FLP <- mixedpower(model = model.H1Label.glmer, data = df,
fixed_effects = c("label"),
simvar = "id", steps = c(20,30,40,50,60),
critical_value = 2, n_sim = 1000)
summary(model.H1Label.glmer)
power_FLP <- mixedpower(model = model.H1Label.glmer, data = df,
fixed_effects = c("label"),
simvar = "id", steps = c(5, 15, 20),
critical_value = 2, n_sim = 10)
styler:::style_active_file()
power_FLP
power_FLP <- mixedpower(
model = model.H1Label.glmer, data = df,
fixed_effects = c("label"),
simvar = "id", steps = c(5, 15, 20),
critical_value = 2, n_sim = 10,
databased = TRUE, SESOI = c(0.5)
)
fixef(model.H1Label.glmer)
power_FLP <- mixedpower(
model = model.H1Label.glmer, data = df,
fixed_effects = c("label"),
simvar = "id", steps = c(5, 15, 20),
critical_value = 2, n_sim = 10,
databased = TRUE, SESOI = c(-0.5, 0.5)
)
power_FLP
power_SESOI <- mixedpower(
model = model.H1Label.glmer, data = df,
fixed_effects = c("label"),
simvar = "id", steps = c(5, 15, 20),
critical_value = 2, n_sim = 10,
databased = TRUE, SESOI = c(-0.5, 0.5)
)
power_SESOI
multiplotPower(power_SESOI)
multiplotPower(power_SESOI)
model.H1Label.glmer <-
glmer(choiceH1LabelOnly ~ label + (1 | id) + (1 | img),
data = df,
family = binomial()
)
model.H1Label.glmer <-
glmer(choiceH1LabelOnly ~ label + (1 | id) + (1 | numImg),
data = df,
family = binomial()
)
df
df |> glimpse()
model.H1Label.glmer <-
glmer(choiceH1LabelOnly ~ label + (1 | id) + (1 | imgNum),
data = df,
family = binomial()
)
summary(model.H1Label.glmer)
library(simr)
library(mixedpower)
fixef(model.H1Label.glmer)
power_FLP <- mixedpower(
model = model.H1Label.glmer, data = df,
fixed_effects = c("label"),
simvar = "id", steps = c(5, 15, 20),
critical_value = 2, n_sim = 10
)
power_FLP
power_SESOI <- mixedpower(
model = model.H1Label.glmer, data = df,
fixed_effects = c("label"),
simvar = "id", steps = c(5, 15, 20),
critical_value = 2, n_sim = 10,
databased = TRUE, SESOI = c(-0.5, 0.5)
)
power_SESOI
multiplotPower(power_SESOI)
summary(model.H1Label.glmer)
R2power <- R2power(model = model.H1Label.glmer, data = df,
fixed_effects = c("label"),
simvar = "id", steps = c(5, 15, 20),
critical_value = 2, n_sim = 10,
databased = TRUE, SESOI = c(-0.5, 0.5),
R2var = "imgNum", R2level = 30)
R2power <- R2power(model = model.H1Label.glmer, data = df,
fixed_effects = c("label"),
simvar = "id", steps = c(5, 15, 20),
critical_value = 2, n_sim = 10,
databased = TRUE, SESOI = c(-0.5, 0.5),
R2var = "imgNum", R2level = 10)
R2power
multiplotPower(R2power)
